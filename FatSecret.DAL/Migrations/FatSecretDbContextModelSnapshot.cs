// <auto-generated />
using System;
using FatSecret.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FatSecret.DAL.Migrations
{
    [DbContext(typeof(FatSecretDbContext))]
    partial class FatSecretDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.FoodEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Calories")
                        .HasColumnType("integer")
                        .HasColumnName("calories");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnName("entry_date");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("food_name");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("other")
                        .HasColumnName("meal_type");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("г")
                        .HasColumnName("unit");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EntryDate")
                        .HasDatabaseName("IX_FoodEntries_EntryDate");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_FoodEntries_UserId");

                    b.HasIndex("UserId", "EntryDate")
                        .HasDatabaseName("IX_FoodEntries_UserId_EntryDate");

                    b.HasIndex("UserId", "MealType", "EntryDate")
                        .HasDatabaseName("IX_FoodEntries_UserId_MealType_EntryDate");

                    b.ToTable("FoodEntries", null, t =>
                        {
                            t.HasCheckConstraint("CK_FoodEntries_Calories", "[calories] >= 0");

                            t.HasCheckConstraint("CK_FoodEntries_Quantity", "[quantity] >= 0");
                        });
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("moderate")
                        .HasColumnName("activity_level");

                    b.Property<int>("Age")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("age");

                    b.Property<int>("BasalMetabolicRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("basal_metabolic_rate");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DailyCalorieTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("daily_calorie_target");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_verification_token");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("email_verified");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("gender");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("maintain")
                        .HasColumnName("goal");

                    b.Property<int>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("height");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordResetExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_expires");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_reset_token");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.Property<decimal>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("EmailVerificationToken")
                        .HasDatabaseName("IX_Users_EmailVerificationToken");

                    b.HasIndex("PasswordResetToken")
                        .HasDatabaseName("IX_Users_PasswordResetToken");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_Users_Age", "[age] >= 0 AND [age] <= 150");

                            t.HasCheckConstraint("CK_Users_BMR", "[basal_metabolic_rate] >= 0");

                            t.HasCheckConstraint("CK_Users_CalorieTarget", "[daily_calorie_target] >= 0");

                            t.HasCheckConstraint("CK_Users_Height", "[height] >= 0 AND [height] <= 300");

                            t.HasCheckConstraint("CK_Users_Weight", "[weight] >= 0 AND [weight] <= 1000");
                        });
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.UserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("DailyReminder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("daily_reminder");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("dd.MM.yyyy")
                        .HasColumnName("date_format");

                    b.Property<bool>("EmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("email_notifications");

                    b.Property<string>("HeightUnit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("cm")
                        .HasColumnName("height_unit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("ru")
                        .HasColumnName("language");

                    b.Property<bool>("ProfilePublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("profile_public");

                    b.Property<bool>("StatsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("stats_public");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("UTC")
                        .HasColumnName("timezone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<bool>("WeeklySummary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("weekly_summary");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("kg")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserPreferences_UserId");

                    b.ToTable("UserPreferences", (string)null);
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("device_info");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_revoked");

                    b.Property<DateTime>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_activity")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserSessions_ExpiresAt");

                    b.HasIndex("TokenId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserSessions_TokenId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserSessions_UserId");

                    b.HasIndex("UserId", "IsRevoked")
                        .HasDatabaseName("IX_UserSessions_UserId_IsRevoked");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.WeightRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("RecordedDate")
                        .HasColumnType("date")
                        .HasColumnName("recorded_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("RecordedDate")
                        .HasDatabaseName("IX_WeightRecords_RecordedDate");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_WeightRecords_UserId");

                    b.HasIndex("UserId", "RecordedDate")
                        .IsUnique()
                        .HasDatabaseName("IX_WeightRecords_UserId_RecordedDate");

                    b.ToTable("WeightRecords", null, t =>
                        {
                            t.HasCheckConstraint("CK_WeightRecords_Weight", "[weight] > 0 AND [weight] <= 1000");
                        });
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.FoodEntry", b =>
                {
                    b.HasOne("FatSecret.Domain.Entities.Identity.User", "User")
                        .WithMany("FoodEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.UserPreferences", b =>
                {
                    b.HasOne("FatSecret.Domain.Entities.Identity.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("FatSecret.Domain.Entities.Identity.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.UserSession", b =>
                {
                    b.HasOne("FatSecret.Domain.Entities.Identity.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.WeightRecord", b =>
                {
                    b.HasOne("FatSecret.Domain.Entities.Identity.User", "User")
                        .WithMany("WeightRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FatSecret.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("FoodEntries");

                    b.Navigation("Preferences");

                    b.Navigation("Sessions");

                    b.Navigation("WeightRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
